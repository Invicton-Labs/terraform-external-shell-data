name: "CICD_v2"

on: [push, pull_request]

jobs:
  Linux:
    strategy:
      fail-fast: false
      matrix:
        image_name: ["alpine", "redhat/ubi8", "redhat/ubi9", "fedora", "ubuntu"]
        tf_version: ["1.2.0"]
        image_tag: ["latest"]
        shell: ["/bin/sh"]
        #include:
          # # Extra tags per image
          # - image_name: "ubuntu"
          #   image_tag: "latest"
          #   shell: "/bin/bash"
          # - image_name: "ubuntu"
          #   image_tag: "latest"
          #   shell: "/bin/dash"
            
          # - image_name: "ubuntu"
          #   image_tag: "18.04"
          #   shell: "/bin/bash"
          # - image_name: "ubuntu"
          #   image_tag: "18.04"
          #   shell: "/bin/dash"

          # - image_name: "ubuntu"
          #   image_tag: "20.04"
          #   shell: "/bin/bash"
          # - image_name: "ubuntu"
          #   image_tag: "20.04"
          #   shell: "/bin/dash"
            
          # - image_name: "ubuntu"
          #   image_tag: "22.04"
          #   shell: "/bin/bash"
          # - image_name: "ubuntu"
          #   image_tag: "22.04"
          #   shell: "/bin/dash"

    runs-on: ubuntu-latest
    container:
      image: "${{ matrix.image_name }}:${{ matrix.image_tag }}"
      volumes:
        - ${{ github.workspace }}:/workspace
    
    steps:
      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v3

      - name: Matrix Values
        run: |
          echo "image_name: ${{ matrix.image_name }}"
          echo "image_tag: ${{ matrix.image_tag }}"
          echo "shell: ${{ matrix.shell }}"
          echo "tf_version: ${{ matrix.tf_version }}"

      - name: Install Terraform (Alpine)
        if: matrix.image_name == 'alpine'
        run: |
          apk add --no-cache git
          wget https://releases.hashicorp.com/terraform/${{ matrix.tf_version }}/terraform_${{ matrix.tf_version }}_linux_amd64.zip
          unzip terraform_${{ matrix.tf_version }}_linux_amd64.zip
          mv terraform /usr/bin/terraform
          
      - name: Install Terraform (Redhat)
        if: startsWith(matrix.image_name, 'redhat/')
        run: |
          yum install -y yum-utils git
          yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo
          yum -y install terraform-${{ matrix.tf_version }}

      - name: Install Terraform (Fedora)
        if: matrix.image_name == 'fedora'
        run: |
          dnf install -y dnf-plugins-core git
          dnf config-manager --add-repo https://rpm.releases.hashicorp.com/fedora/hashicorp.repo
          dnf -y install terraform-${{ matrix.tf_version }}

      - name: Install Terraform (Ubuntu)
        if: matrix.image_name == 'ubuntu'
        run: |
          apt-get update
          apt-get install -y curl gnupg
          curl -fsSL https://apt.releases.hashicorp.com/gpg | apt-key add -
          apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          apt-get update
          apt-get install -y terraform=${{ matrix.tf_version }}

      # Initialize the workspace
      - name: Terraform Init
        working-directory: /workspace/tester
        run: terraform init

      # We only need to run a plan, since there are no resources used in testing
      - name: Terraform Plan
        working-directory: /workspace/tester
        run: terraform plan